# install angular cli
> npm install -g @angular/cli

# create a new angular project
> ng new my-project

# install bootstrap on your project (open the terminal from the project folder)
> npm install --save bootstrap

# start the project (open the terminal from the project folder)
> ng serve

# generate component
> ng generate component component_name
> ng g c component_name --spec false


Data Binding
 - String interpolation: {{ name }}
 - Property binding: [disabled]="!notAllowed"
 - Do not mix property binding with string interpolation!!! [disabled]="{{!notAllowed}}"
 - Event binding: (click)="onCreateServer()" 
	Important: For events, you don't bind to onclick but only to click (=> (click)).
 - One-Way-Binding: (input)="onUpdateServerName($event)"
 - Two-Way-Binding: [(ngModel)]="serverName"
	Important: For Two-Way-Binding to work, you need to enable the ngModel  directive. 
	This is done by adding the FormsModule  to the imports[]  array in the AppModule.
	You then also need to add the import from @angular/forms  in the app.module.ts file:
	import { FormsModule } from '@angular/forms'; 
	
Directives:
1. Structural directives add or remove elements from dom
2. Unstructural directives only change the element they were placed on

 - *ngIf -> adding/removing something from dom, the * means that this is a structural directive that will change the dom
 	 <p *ngIf="serverCreated; else noServer">Server was created, server name is {{ serverName }}</p>
	<ng-template #noServer>
	  <p>No server was created</p>
	</ng-template>
	
 - [ngStyle] 
	<p [ngStyle]="{backgroundColor: getColor()}">{{ 'Server' }} with ID {{ serverId }} is {{ getServerStatus() }}</p>
	
 - [ngClass] -> [ngClass]="{className: condition}"
	<p [ngClass]="{online: true}">Paragraph</p>
	
 - *ngFor
	<app-server *ngFor="let server of servers; let i = index"></app-server>
	
 - ngContent
 
 - ng-template
	<ng-template [ngIf]="onlyOdd">
		<p>Only odd</p>
	</ng-template>
 
 - ngSwith
  <div [ngSwitch]="value">
	<p *ngSwitchCase="5">Value is 5</p>
	<p *ngSwitchCase="10">Value is 10</p>
	<p *ngSwitchCase="100">Value is 100</p>
	<p *ngSwitchDefault>Value is Default</p>
  </div>

 - create a directive
 > ng g d name-directive
 
- Reactive Events with HostListener and HostBinding
	import {Directive, ElementRef, HostBinding, HostListener, OnInit, Renderer2, Input} from '@angular/core';

	@Directive({
	  selector: '[appBetterHighlight]'
	})
	export class BetterHighlightDirective implements OnInit {
	  @Input() defaultColor: string = 'transparent';
	  @Input() highlightColor: string = 'blue';
	  @HostBinding('style.backgroundColor') backgroundColor: string;

	  constructor(private elRef: ElementRef, private renderer: Renderer2) { }

	  ngOnInit() {
		this.backgroundColor = this.defaultColor;
		// this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');
	  }

	  @HostListener('mouseenter') mouseover(eventData: Event) {
		// this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');
		this.backgroundColor = this.highlightColor;
	  }

	  @HostListener('mouseleave') mouseleave(eventData: Event) {
		// this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'transparent');
		this.backgroundColor = this.defaultColor;
	  }
	}
	
	<p appBetterHighlight [defaultColor]="'yellow'" [highlightColor]="'red'">Style me with a better directive!</p>
____________________________________________________________________________
	@Input() defaultColor: string = 'transparent';
	@Input('appBetterHighlight') highlightColor: string = 'blue';
	@HostBinding('style.backgroundColor') backgroundColor: string;
	<p [appBetterHighlight]="'red'" defaultColor="yellow">Style me with a better directive!</p>
		
Custom Structural Directive
	import {Directive, Input, TemplateRef, ViewContainerRef} from '@angular/core';

	@Directive({
	  selector: '[appUnless]'
	})
	export class UnlessDirective {
	  @Input() set appUnless(condition: boolean) {
		if (!condition) {
		  this.vcRef.createEmbeddedView(this.templateRef);
		} else {
		  this.vcRef.clear();
		}
	  }

	  constructor(private templateRef: TemplateRef<any>, private vcRef: ViewContainerRef) {}
	}
	
	<div *appUnless="onlyOdd">only odd</div>


Binding to Custom Events
 - @Input
	@Input() element, @Input('srvElement') element: {type: string, name: string, content: string};
	[srvElement]="serverElement"
	
 - @Output
	@Output() serverCreated, @Output('srvCreated') serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();
	this.serverCreated.emit({
      serverName: this.newServerName,
      serverContent: this.newServerContent
    });
	(srvCreated)="onServerAdded($event)"
	
Local References
 - Passes to methods:
   <input type="text" class="form-control" #serverNameInput>
   <button class="btn btn-primary" (click)="onAddServer(serverNameInput)">Add Server</button>
   onAddServer(nameInput: HTMLInputElement) {
    this.serverCreated.emit({
      serverName: nameInput.value,
      serverContent: this.newServerContent
    });
  }
 - With @ViewChild
	<input type="text" class="form-control" #serverContentInput>
	@ViewChild('serverContentInput') serverContentInput: ElementRef;
	onAddServer(nameInput: HTMLInputElement) {
      this.serverCreated.emit({
       serverName: nameInput.value,
       serverContent: this.serverContentInput.nativeElement.value
     });
   }
 

Services: appModule level, appComponent level, component level
	import { Component, EventEmitter, Input, Output } from '@angular/core';
	import {LoggingService} from '../logging.service';

	@Component({
	  selector: 'app-account',
	  templateUrl: './account.component.html',
	  styleUrls: ['./account.component.css'],
	  providers: [LoggingService]
	})
	export class AccountComponent {

	  constructor(private loggingService: LoggingService) {}

	  onLog(status: string) {
		this.loggingService.logStatusChange(status);
	  }
	}

Injectable -> Use @Injectable if you want to inject a service into another service	
	@Injectable()
	export class AccountsService {
		constructor(private loggingService: LoggingService) {}
	}
	
Routing
		const appRoutes: Routes = [
		  {path: '', component: HomeComponent},
		  {path: 'users', component: UsersComponent},
		  {path: 'servers', component: ServersComponent}
		];

		@NgModule({
		  declarations: [
			...
		  ],
		  imports: [
			...
			RouterModule.forRoot(appRoutes)
		  ],
		  ...
		})
		export class AppModule { }
		
		<li role="presentation" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}"><a routerLink="/">Home</a></li>
		<li role="presentation" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}"><a routerLink="/servers">Servers</a></li>
		<li role="presentation" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}"><a [routerLink]="['/users']">Users</a></li>
		  
		<router-outlet></router-outlet>
		
	Navigate from controller
		constructor(private router: Router) { }

		onLoadServers() {
			// complex calculation
			this.router.navigate(['/servers']);
		}

	Redirecting
	 - { path: '', redirectTo: '/somewhere-else', pathMatch: 'full' } 
	 - Now, you only get redirected, if the full path is ''  (so only if you got NO other content in your path in this example).
	 
	Guards
	 - canActivate
	 - canActivateChild
	 
	Pass Static Data:
	 - {path: 'not-found', component: ErrorPageComponent, data: {message: 'Page not found!'}},
	 - this.route.data.subscribe(
		  (data: Data) => {
			this.errorMessage = data['message'];
		  }
		);
		
	Pass Dynamic Data:
	 - with resolvers
	 - {path: ':id', component: ServerComponent, resolve: {server: ServerResolver} },
	 - this.route.data.subscribe(
		  (data: Data) => {
			this.server = data['server'];
		  }
		);

		
Observables - reactivex.io

  ngOnInit() {
	const myNumbers = Observable.interval(1000);
	this.numbersObsSubscription = myNumbers.subscribe(
	  (number: number) => {
		console.log(number);
	  }
	);

    const myObservable = Observable.create((observer: Observer<string>) => {
        setTimeout(() => {
          observer.next('first package');
        }, 2000);
        setTimeout(() => {
          observer.next('second package');
        }, 4000);
        setTimeout(() => {
          // observer.error('this does not work');
          observer.complete();
        }, 5000);
        setTimeout(() => {
          observer.next('third package');
        }, 6000);
      });

    this.customObSubscription = myObservable.subscribe(
      (data: string) => { console.log(data); },
      (error: string) => { console.log(error); },
      () => { console.log('completed'); }
    );
  }

  ngOnDestroy() {
    this.numbersObsSubscription.unsubscribe();
    this.customObSubscription.unsubscribe();
  }		
  
Subject -> Observable and Observer in the same time
		-> Use instead of EventEmitter
		
Forms:
	1. Template Driven - TD - FormsModule
	2. Reactive Approach - ReactiveFormsModule
	
Forms Template Driven (TD): 
	<form (ngSubmit)="onSubmit()" #f="ngForm">
	</form>
	
	- Registering control: - ngModel directive and name attribute -> informing that this input is a control
	<input
	  type="text"
	  id="username"
	  class="form-control"
	  ngModel
	  name="username">
	
	- Submit Form:
	// #f is a local reference
	<form (ngSubmit)="onSubmit(f)" #f="ngForm">
	onSubmit(form: NgForm) {
		console.log(form);
	}
	
	- Outputting validation
	// template
	<input
	  type="email"
	  id="email"
	  class="form-control"
	  ngModel
	  name="email"
	  required
	  email
	  #email="ngModel">
	<span *ngIf="!email.valid && email.touched" class="help-block">Please enter a valid email!</span>
	// css
	input.ng-invalid.ng-touched {
	  border: 1px solid red;
	}
    
	- One-Way-Binding -> Set default values with ngModel property binding
	// template
	<select
		id="secret"
		class="form-control"
		[ngModel]="defaultQuestion"
		name="secret">
		<option value="pet">Your first Pet?</option>
		<option value="teacher">Your first teacher?</option>
	</select>
	// type script
	defaultQuestion = "pet";
	
	- Two-Way-Binding
	<div class="form-group">
	<textarea
		name="questionAnswer"
		rows="3"
		class="form-control"
		[(ngModel)]="answer"></textarea>
	</div>
	<p>Your reply: {{ answer }}</p>
	
	- Grouping Form Containers
	<div id="user-data" ngModelGroup="userData" #userData="ngModelGroup">
		...
	</div>
	<p *ngIf="!userData.valid && userData.touched">User Data is invalid!</p>
	
	- Set and Patch value
	 suggestUserName() {
		const suggestedName = 'Superuser';
		this.signupForm.setValue({
		 userData: {
			username: suggestedName,
			email: ''
		   },
			 secret: 'pet',
			questionAnswer: '',
			gender: 'male'
		});

		this.signupForm.form.patchValue({
		  userData: {
			username: suggestedName
		  }
		});
	  }
	  
	- Extract data from the form
		this.user.username = this.signupForm.value.userData.username;
		this.user.email = this.signupForm.value.userData.email;
		this.user.secretQuestion = this.signupForm.value.secret;
		this.user.answer = this.signupForm.value.questionAnswer;
		this.user.gender = this.signupForm.value.gender;
		

Forms Reactive Approach:
	<form [formGroup]="signupForm" (ngSubmit)="onSubmit()">
	</form>
	
	- Registering Controls
		// template
		<input
			type="text"
			id="username"
			formControlName="username"
			class="form-control">
		<span
			*ngIf="!signupForm.get('username').valid && signupForm.get('username').touched"
			class="help-block">Please enter a valid username!</span>
			
		// type script
		signupForm: FormGroup;
		ngOnInit() {
			this.signupForm = new FormGroup({
			  'username': new FormControl(null, Validators.required),
			  'email': new FormControl(null, [Validators.required, Validators.email]),
			  'gender': new FormControl('male', Validators.required)
			});
		}
	
	- Grouping Form Containers
		this.signupForm = new FormGroup({
		  'userData': new FormGroup({
			'username': new FormControl(null, Validators.required),
			'email': new FormControl(null, [Validators.required, Validators.email])
		  }),
		  'gender': new FormControl('male', Validators.required),
		  'hobbies': new FormArray([])
		});
		// template
		<div formGroupName="userData">
			<div class="form-group">
			<label for="username">Username</label>
			<input
			  type="text"
			  id="username"
			  formControlName="username"
			  class="form-control">
			<span
			  *ngIf="!signupForm.get('userData.username').valid && signupForm.get('userData.username').touched"
			  class="help-block">Please enter a valid username!</span>
		  </div>
		</div>
	
	- Form Arrays
		<div formArrayName="hobbies">
          <h4>Your hobbies</h4>
          <button
            class="btn btn-default"
            type="button"
            (click)="onAddHobby()">Add Hobby</button>
          <div
            class="form-group"
            *ngFor="let hobby of signupForm.get('hobbies').controls; let i = index">
            <input type="text" class="form-control" [formControlName]="i">
          </div>
        </div>
		
		// type script
		onAddHobby() {
			const control = new FormControl(null, Validators.required);
			(<FormArray>this.signupForm.get('hobbies')).push(control);
		}
		
	- Custom Validators
		forbiddenUsernames = ['Chris', 'Anna'];
		
		'username': new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)]),
		
		forbiddenNames(control: FormControl): {[s: string]: boolean} {
			if (this.forbiddenUsernames.indexOf(control.value) !== -1) {
			  return {'nameIsForbidden': true};
			} else {
			  return null;
			}
		}
		
		template:
		<span
		  *ngIf="!signupForm.get('userData.username').valid && signupForm.get('userData.username').touched"
		  class="help-block">
		  <span *ngIf="signupForm.get('userData.username').errors['nameIsForbidden']">This name is invalid!</span>
		  <span *ngIf="signupForm.get('userData.username').errors['required']">This field is required!</span>
		</span>
		
	- Asynchronous Validators:
		'email': new FormControl(null, [Validators.required, Validators.email], this.forbiddenEmails)
		
		forbiddenEmails(control: FormControl): Promise<any> | Observable<any> {
			const promise = new Promise<any>((resolve, reject) => {
			  setTimeout(() => {
				if (control.value === 'test@test.com') {
				  resolve({'emailIsForbidden': true});
				} else {
					resolve(null);
				}
			  }, 1500);
			});

			return promise;
		}
		
Pipes
	- {{ max | uppercase }}
	- {{ server.date | date }} => Aug 8, 1920
	- {{ server.date | date:'fullDate' }} => Sunday, August 8, 1920
	- @Pipe({
		  name: 'filter',
		  pure: false
		})
		export class FilterPipe implements PipeTransform {...
	- <h2>App Status: {{ appStatus | async }}</h2>
		- in the ts file:
		appStatus = new Promise((resolve, reject) => {
		setTimeout(() => {
		  resolve('stable');
		}, 2000);
	  });